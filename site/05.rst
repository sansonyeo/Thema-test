##############################
다양한 편집 모드 활성화하기
##############################

지금까지는 그리드에서 데이터를 출력하는 기능만 사용해보았습니다.
가계부에서는 데이터를 수정할 수 있어야 하므로, 그리드에서 제공하는 ``editor`` 옵션을 사용해 다양한 편집 모드를 활성화해봅니다.

각 카테고리에서 필요로 하는 편집 모드는 다음과 같습니다.

* 날짜 : 데이트 피커
* 내역 : 셀렉트 박스
* 비고 : 텍스트 인풋
* 결제 방식 : 체크박스
* 금액 : 텍스트 인풋

카테고리별로 편집 모드를 적용해보겠습니다.
``columnData`` 의 각 카테고리 정보에 해당하는 객체에 ``editor`` 옵션을 순서대로 추가해봅니다.


텍스트 인풋 옵션 사용하기
==============================

- 적용 컬럼 : '비고', '금액'

가장 기본적인 인풋 타입으로, ``editor`` 의 값을 텍스트로 설정(``'text'``)하면 됩니다.

.. code-block:: javascript

    ...

    const columnData = [
      ...
      {
        header: '비고',
        name: 'category2',
        editor: 'text'
      },
      ...
      {
        header: '금액',
        name: 'amount',
        editor: 'text'
      }
    ];


셀렉트 박스, 체크박스 인풋 옵션 사용하기
=========================================

- 적용 컬럼 : '내역', '결제 방식'

데이터가 될 값을 여러 개의 값 중에서 선택하려고 할 때 사용합니다.
텍스트 인풋과는 다르게 ``type`` 과 ``options`` 라는 속성을 가진 객체 형태로 ``editor`` 의 값을 설정합니다.
셀렉트 박스의 타입은 ``'select'`` , 체크박스의 타입은 ``'checkbox'`` 입니다.
그리고 ``options`` 속성에 ``listItems`` 을 설정하여 선택하려는 값 목록을 배열에 담아 초기화합니다. 

여기서 한 가지 중요한 사항이 있습니다.
일반적으로 셀렉트 박스, 체크박스 같은 경우, ``text`` 속성을 레이블로 사용하고 ``value`` 속성을 내부 값으로 사용합니다.
그리드의 셀 내에서 ``text``, ``value`` 값의 매핑을 위해 반드시 ``formatter`` 옵션을 ``'listItemText'`` (내장 포매터)로 설정해야합니다.

.. code-block:: javascript

    ...

    const columnData = [
      ...
      {
        header: '내역',
        name: 'category1',
        formatter: 'listItemText',
        editor: {
          type: 'select',
          options: {
            listItems: [
              {
                text: '선택 안함',
                value: '0'
              },
              {
                text: '식비',
                value: '1'
              },
              {
                text: '문화 생활비',
                value: '2'
              },
              {
                text: '교통비',
                value: '3'
              },
              {
                text: '관리비',
                value: '4'
              }
            ]
          }
        }
      },
      ...
      {
        header: '결제 방식',
        name: 'payment',
        formatter: 'listItemText',
        editor: {
          type: 'checkbox',
          options: {
            listItems: [
              {
                text: '현금',
                value: '1'
              },
              {
                text: '카드',
                value: '2'
              },
              {
                text: '페이코',
                value: '3'
              }
            ]
          }
        }
      },
      ...
    ];


이때 주의할 사항이 있습니다.
텍스트 인풋을 제외한 다른 편집 타입의 경우 데이터 형식을 변경해야 합니다.

예를 들어 체크박스를 사용하는 컬럼의 데이터는 ``editor.options.listItems`` 에 설정된 각 리스트의 값(``value``) 중 하나와 일치해야 합니다.
다음과 같이 데이터를 변경해봅니다.

.. code-block:: javascript

    ...

    const rowData = [
      {
        date: '2019-11-27',
        category1: '1', // '식비' -> '1' 변경
        category2: '회사 편의점',
        payment: '3', // '페이코' -> '3' 변경
        amount: '5000'
      }
    ];


데이트 피커 에디터 사용하기
==============================

- 적용 컬럼 : '날짜'

텍스트 인풋을 사용하면서 텍스트 인풋이 선택되었을 때 레이어를 띄워 날짜를 선택할 수 있도록 변경해보겠습니다.

그리드에서는 |datepicker| 컴포넌트를 사용하여 날짜를 선택할 수 있는 기능을 제공합니다.
셀렉트 박스, 체크박스처럼 ``editor`` 옵션을 객체 형태로 설정합니다. 한 가지 다른 점은 ``options`` 에 날짜의 포맷을 지정할 수 있는 ``format`` 속성이 들어가는 점입니다.

.. |datepicker| raw:: html 

  <a href="https://github.com/nhn/tui.date-picker" target="_blank">TOAST UI DatePicker</a>

.. code-block:: javascript

    ...

    const columnData = [
      {
        header: '날짜',
        name: 'date',
        editor: {
          type: 'datePicker',
          options: {
            format: 'yyyy-MM-dd'
          }
        }
      },
      ...
    ];


또한 데이트 피커 에디터를 사용하기 위해서는 반드시 스타일을 추가해야 합니다.
다음과 같이 파일 상단에서 `그리드의 스타일을 가져오는 코드 아래` 에 데이트 피커의 스타일을 추가해줍니다.

.. code-block:: javascript

    ...

    import 'tui-date-picker/dist/tui-date-picker.css'; // 데이트 피커 스타일 추가


이 외 다른 편집 모드를 추가하고 싶다면 |editor| 을 참고하여 추가해봅니다.

.. |editor| raw:: html 

  <a href="https://github.com/nhn/tui.grid/blob/master/packages/toast-ui.grid/docs/ko/date-picker.md" target="_blank">튜토리얼</a>


결과 화면
==============================

.. image:: _static/step05.png
